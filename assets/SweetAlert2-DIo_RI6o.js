import{_ as Wt,r as w,a as Rt,c as Ht,b as o,e as s,x as y,u as a,t as k,F as It,o as qt}from"./index-BX8hzqNv.js";import{S as e}from"./sweetalert2.esm.all-BkU8I-GU.js";import{a as b}from"./axios-upsvKRUO.js";const Nt={class:"box mb-52"},Vt={class:"d-block mb-28"},zt={class:"d-block mb-28"},Gt={class:"d-block mb-28"},Ut={class:"box mb-52"},Jt={class:"d-block mb-28"},Xt={class:"d-block mb-28"},Qt={class:"d-block mb-28"},Yt={class:"d-block mb-28"},Zt={class:"box d-flex flex-wrap gap-3 mb-52"},_t={class:"box d-flex flex-wrap gap-3 mb-3 mb-52"},to={class:"box d-flex flex-wrap gap-3 mb-3 mb-52"},oo={class:"box d-flex flex-wrap gap-3 mb-3 mb-52"},no={class:"box d-flex flex-wrap gap-3 mb-3 mb-52"},eo={class:"box d-flex flex-wrap gap-3 mb-3 mb-52"},lo={__name:"SweetAlert2",setup(so){function J(){e.fire("這是最基本的訊息窗！")}function X(){e.fire({icon:"question",title:'<p style="color: red;">這是 title，可以寫 HTML</p>',text:"<p>這是 text，不能寫 HTML</p>"})}function Q(){e.fire({icon:"error",title:"這是 title",text:"這是 text",footer:'<p style="color: blue;">這是 footer，可以寫 HTML。</p>'})}function Y(){e.fire({title:"這是 title",text:"這是 text",footer:'這是 footer，<span style="color: blue;">可以寫 style 把 color 蓋掉</span>。',color:"red"})}function Z(){e.fire({imageUrl:"https://images.unsplash.com/photo-1724141973274-f3a90b9aa7d8?q=80&w=1887&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D",imageWidth:300,imageAlt:"A tall image",icon:"info",title:"這是 title",text:"這是 text"})}function _(){e.fire({title:'<h2 class="text-danger">這是 H2 title</h2>',text:"這是 text",html:`
			<p>這是 html 內容。</p>
			<p>
				你可以查看 
				<a href="https://sweetalert2.github.io/#examples" target="_blank">
					SweetAlert2 範例
				</a>
				。
			</p>
			<p>
				當同時定義了 text 和 html 屬性時，僅會使用 html 屬性內容。
			</p>
		`})}function tt(){e.fire({title:"這是 title",text:"只能點擊 button 關閉視窗",showCloseButton:!0,allowOutsideClick:!1,allowEscapeKey:!1})}function ot(){e.fire({icon:"success"})}function nt(){e.fire({icon:"error"})}function et(){e.fire({icon:"warning"})}function lt(){e.fire({icon:"info"})}function st(){e.fire({icon:"question"})}function it(){e.fire({title:"這是 title",text:"這是 text",showCloseButton:!0,confirmButtonText:'<i class="fa fa-thumbs-up"></i>&nbsp;&nbsp;&nbsp;這是自定義的 Confirm button',confirmButtonAriaLabel:"confirm button",confirmButtonColor:"blue",showDenyButton:!0,denyButtonText:'<i class="fa fa-thumbs-down"></i>&nbsp;&nbsp;&nbsp;這是自定義的 Deny button',denyButtonColor:"#000",showCancelButton:!0,cancelButtonText:'<i class="fa-solid fa-ban"></i>&nbsp;&nbsp;&nbsp;這是自定義的 Cancel button',cancelButtonAriaLabel:"cancel button",cancelButtonColor:"rgb(59, 255, 0)"})}function rt(){const n=e.fire({title:"這是 title",text:"這是 text",showCloseButton:!0,closeButtonHtml:'<i class="fa-regular fa-closed-captioning"></i>',confirmButtonText:"Confirm",showDenyButton:!0,denyButtonText:"Deny",showCancelButton:!0,cancelButtonText:"Cancel",focusCancel:!0});console.log("alertObj ==>",n),n.then(t=>{console.log("result ==>",t),t.isConfirmed?e.fire("Confirmed","由 Confirm button 觸發","success"):t.isDenied?e.fire("Denied","由 Deny button 觸發","error"):t.isDismissed&&e.fire("Dismissed","由 Cancel button 觸發","info")})}function at(){e.mixin({customClass:{confirmButton:"btn btn-success",cancelButton:"btn btn-danger",title:"text-primary"}}).fire({title:"這是 BS style title",text:"這是 text",confirmButtonText:"確定",showCancelButton:!0,cancelButtonText:"取消"})}function ut(){e.fire({icon:"success",title:"儲存成功！",showConfirmButton:!1,position:"top-end",timer:1500})}function bt(){e.fire({allowEscapeKey:!1,allowOutsideClick:!1,showConfirmButton:!1,title:"計時器",text:"3 秒後將自動關閉",position:"top",timer:3e3,timerProgressBar:!0})}function ft(){e.fire({allowEscapeKey:!1,allowOutsideClick:!1,showConfirmButton:!1,title:"4 秒計時器",text:"當滑鼠移入時會暫停計時",position:"top",timer:4e3,timerProgressBar:!0,didOpen(n){console.log("popup ==>",n),n.onmouseenter=e.stopTimer,n.onmouseleave=e.resumeTimer}})}function ct(){let n;e.fire({allowEscapeKey:!1,allowOutsideClick:!1,title:"4 秒計時器",html:"還有 <b>4</b> 秒關閉",position:"top",timer:4e3,timerProgressBar:!0,didOpen(t){console.log("didOpen..."),console.log("popup ==>",t);const l=t.querySelector("b");console.log("timer ==>",l),n=setInterval(()=>{l.textContent=`${Math.ceil(e.getTimerLeft()/1e3)}`},1e3)},willClose(t){console.log("willClose..."),clearInterval(n)}})}function dt(){e.mixin({toast:!0,showConfirmButton:!1,position:"top-end",timer:3e3,timerProgressBar:!0,didOpen:t=>{t.onmouseenter=e.stopTimer,t.onmouseleave=e.resumeTimer}}).fire({icon:"success",title:"這是吐司訊息 1",text:"text1"})}function pt(){e.mixin({toast:!0,showConfirmButton:!1,position:"bottom-end",timer:3e3,timerProgressBar:!0,didOpen:n=>{n.onmouseenter=e.stopTimer,n.onmouseleave=e.resumeTimer}}).fire({icon:"warning",title:"這是吐司訊息 2",text:"text2"})}function mt(){e.fire({icon:"info",title:"4 秒後將自動關閉",text:"會偵測各種關閉的方式",showCancelButton:!0,showCloseButton:!0,showDenyButton:!0,position:"top",timer:4e3,timerProgressBar:!0}).then(n=>{console.log("result ==>",n);let t="視窗關閉原因：";const l=n.dismiss;console.log("dismiss ==>",n.dismiss),n.isConfirmed?t+="點擊 Confirm button":n.isDenied?t+="點擊 Deny button":l===e.DismissReason.backdrop?t+="點擊外部區域":l===e.DismissReason.esc?t+="按 ESC 關閉":l===e.DismissReason.timer?t+="被 timer 關閉":l===e.DismissReason.close?t+="點擊 Close button":l===e.DismissReason.cancel&&(t+="點擊 Cancel button"),e.fire(t)})}function gt(){let n;e.fire({allowEscapeKey:!1,allowOutsideClick:!1,confirmButtonText:"登入",showDenyButton:!0,denyButtonText:"離開",position:"top",icon:"success",title:"註冊成功！",html:"<b>5</b> 秒後將為您自動登入，若不想登入請點擊「離開」。",timer:5e3,timerProgressBar:!0,didOpen(t){const l=t.querySelector("b");n=setInterval(()=>{l.textContent=`${Math.ceil(e.getTimerLeft()/1e3)}`},1e3)},willClose(t){clearInterval(n)}}).then(t=>{t.isDenied||alert("進行登入動作")})}function yt(){e.fire({title:"這是有背景的訊息",text:"這是 text",width:600,background:"url(https://sweetalert2.github.io/images/trees.png)",backdrop:`
			rgba(0,0,123,0.4)
			url('https://sweetalert2.github.io/images/nyan-cat.gif')
			no-repeat
			left bottom
		`})}const f=n=>({didRender:()=>{console.log(`[${n}] didRender ...`)},willOpen:()=>{console.log(`[${n}] willOpen ...`)},didOpen:()=>{console.log(`[${n}] didOpen ...`)},willClose:()=>{console.log(`[${n}] willClose ...`)},didClose:()=>{console.log(`[${n}] didClose ...`)},didDestroy:()=>{console.log(`[${n}] didDestroy ...`)}});function Ct(){console.log("[alertLifecycle] start ...");const n=e.fire({text:"SweetAlert2 的 Lifecycle",allowEscapeKey:!1,allowOutsideClick:!1,showConfirmButton:!1,timer:3e3,timerProgressBar:!0,...f("alertLifecycle")});console.log("alertObj ==>",n),console.log("[alertLifecycle] finish.")}async function xt(){console.log("[testLifecycleAsync] function start..."),await e.fire({title:"觀察生命週期的異步狀態",...f("testLifecycleAsync")}),setTimeout(()=>{console.log("This is setTimeout 0!")},0),setTimeout(()=>{console.log("This is setTimeout 240!")},240),setTimeout(()=>{console.log("This is setTimeout 250!")},250),setTimeout(()=>{console.log("This is setTimeout 260!")},260),setTimeout(()=>{console.log("This is setTimeout 300!")},300),console.log("[testLifecycleAsync] function end.")}function wt(){e.fire("會自動 focus 觸發元素")}function kt(){e.fire({title:"取消 focus 觸發元素",returnFocus:!1})}async function Tt(){console.log("[testReturnFocusLifecycle] function start..."),await e.fire({title:"觀察 returnFocus 發生的時機",...f("testReturnFocusLifecycle")}),setTimeout(()=>{console.log("This is setTimeout 0!")},0),setTimeout(()=>{console.log("This is setTimeout 100!")},100),setTimeout(()=>{console.log("This is setTimeout 250!")},250),setTimeout(()=>{console.log("This is setTimeout 300!")},300),console.log("[testReturnFocusLifecycle] function end.")}const B=w(null);async function A(){console.log("[testFocus1] function start..."),await e.fire({title:"請按下 Enter 關閉訊息窗",text:"你會發現永遠都是被關了又自動打開...",returnFocus:!1,...f("testFocus1")}),console.log("focus 輸入框!"),B.value.focus(),console.log("[testFocus1] function end.")}const L=w(null);async function O(){console.log("[testFocus2] function start..."),await e.fire({title:"請按下 Enter 關閉訊息窗",text:"只要是正常手速，就不會再次觸發訊息窗。",returnFocus:!1,...f("testFocus2"),didDestroy:()=>{console.log("[testFocus2] didDestroy..."),console.log("focus 輸入框!"),L.value.focus()}}),console.log("[testFocus2] function end.")}const D=w(null);async function E(){console.log("[testFocus3] function start..."),await e.fire({title:"不支援 Enter 觸發 Confirm button",text:"就是不讓你按 Enter 關閉，但如果使用 Tab 就...",returnFocus:!1,...f("testFocus3"),didOpen(n){console.log(n),n.focus()},didDestroy:()=>{console.log("[testFocus3] didDestroy..."),console.log("focus 輸入框!"),D.value.focus()}}),console.log("[testFocus3] function end.")}const F=w(null);async function S(){console.log("[testFocus4] function start..."),await e.fire({title:"改成 keyup 才觸發 button",returnFocus:!1,...f("testFocus4"),didOpen(n){const t=n.querySelector(".swal2-confirm");t.addEventListener("keydown",l=>{console.log(l.key),l.key==="Enter"&&(console.log("prevent..."),l.preventDefault())}),t.addEventListener("keyup",l=>{console.log(l.key),l.key==="Enter"&&(console.log("click..."),t.click())})},didDestroy:()=>{console.log("[testFocus4] didDestroy..."),console.log("focus 輸入框!"),F.value.focus()}}),console.log("[testFocus4] function end.")}function vt(){console.log("[loadingObj] start ..."),e.showLoading(),setTimeout(()=>{e.hideLoading()},3e3),setTimeout(()=>{e.close()},6e3),console.log("[loadingObj] finish.")}function Bt(){e.fire({title:"訊息窗",text:"3 秒後開啟 loading，再 3 秒後關閉 loading",showCancelButton:!0,allowEscapeKey:!1,allowOutsideClick:!1}),setTimeout(()=>{e.showLoading(),setTimeout(()=>{e.hideLoading()},3e3)},3e3)}function At(){e.showLoading(),setTimeout(()=>{const n=e.fire({html:'<div class="text-bold" style="font-size: 24px;">努力加載中 ...<div>',allowEscapeKey:!1,allowOutsideClick:!1,position:"top",didOpen:()=>{e.showLoading()}});console.log("[alertCustomLoading] loadingObj ==>",n),setTimeout(()=>{e.hideLoading()},3e3)},3e3)}function Lt(){console.log("[alertCustomLoading] start ...");const n=e.fire({html:'<div class="text-bold" style="font-size: 24px;">5 秒後關閉 ...<div>',showConfirmButton:!1,allowEscapeKey:!1,allowOutsideClick:!1,didOpen:()=>{e.showLoading()}});console.log("[alertCustomLoading] loadingObj ==>",n),setTimeout(()=>{n.close()},5e3),console.log("[alertCustomLoading] finish.")}function Ot(){const n=e.mixin({title:"我是訊息 A",position:"top",...f("myAlertA")}),t=e.mixin({title:"我是訊息 B",position:"bottom",...f("myAlertB")});function l(){n.fire({text:"3 秒後開啟訊息 B"}),setTimeout(()=>{t.fire()},3e3)}function T(){n.fire({text:"3 秒後開啟 loading，再 3 秒後開啟訊息 B"}),setTimeout(()=>{e.showLoading(),setTimeout(()=>{t.fire()},3e3)},3e3)}return{alertTwo:l,alertLoadingAndMsg:T}}const{alertTwo:h,alertLoadingAndMsg:$}=Ot(),u=w([]);function Dt(){const n="https://randomuser.me/api/",t="https://randomuser.me/api1/",l=m=>{var d,p,i;return((i=(p=(d=m.data)==null?void 0:d.results[0])==null?void 0:p.name)==null?void 0:i.last)??""};function T(m,d,p){b.get(m).then(i=>{console.log("res1 ==>",i);const r=l(i);return alert(`加入 ${r}`),u.value.push(r),b.get(d)}).then(i=>{console.log("res2 ==>",i);const r=l(i);return alert(`加入 ${r}`),u.value.push(r),b.get(p)}).then(i=>{console.log("res3 ==>",i);const r=l(i);alert(`加入 ${r}`),u.value.push(r)}).catch(i=>{console.error(i),alert(i.message)}).finally(()=>{console.log("finally.....")})}const Ft=()=>{T(n,n,n)},St=()=>{T(n,t,n)},g=e.mixin({html:'<div class="text-bold" style="font-size: 24px;">取得資料中 ...<div>',showConfirmButton:!1,allowEscapeKey:!1,allowOutsideClick:!1,...f("loadingSwal"),didOpen:()=>{console.log("[loadingSwal] [didOpen] open loading ..."),e.showLoading()}}),c=e.mixin({position:"top",confirmButtonText:"確定",...f("msgSwal")}),v=e.mixin({position:"top",icon:"error",confirmButtonText:"確定",...f("errorSwal")});function V(m,d,p){g.fire(),b.get(m).then(i=>{console.log("res1 ==>",i);const r=l(i);return c.fire(`加入 ${r}`),u.value.push(r),b.get(d)}).then(i=>{console.log("res2 ==>",i);const r=l(i);return c.fire(`加入 ${r}`),u.value.push(r),b.get(p)}).then(i=>{console.log("res3 ==>",i);const r=l(i);c.fire(`加入 ${r}`),u.value.push(r)}).catch(i=>{console.error(i),v.fire(`${i.message}`)}).finally(()=>{console.log("finally....."),g.close()})}const ht=()=>{V(n,n,n)},$t=()=>{V(n,t,n)};function z(m,d,p){g.fire(),b.get(m).then(async i=>{console.log("res1 ==>",i);const r=l(i);return await c.fire(`加入 ${r}`),u.value.push(r),b.get(d)}).then(async i=>{console.log("res2 ==>",i);const r=l(i);return await c.fire(`加入 ${r}`),u.value.push(r),b.get(p)}).then(async i=>{console.log("res3 ==>",i);const r=l(i);await c.fire(`加入 ${r}`),u.value.push(r)}).catch(async i=>{console.error(i),await v.fire(`${i.message}`)}).finally(()=>{console.log("finally....."),g.close()})}const Pt=()=>{z(n,n,n)},jt=()=>{z(n,t,n)};async function G(m,d,p){console.log("[testAsyncAwait] start ..."),g.fire();try{const i=await b.get(m);console.log("res1 ==>",i);let r=l(i);await c.fire(`加入 ${r}`),u.value.push(r);const C=await b.get(d);console.log("res2 ==>",C),r=l(C),await c.fire(`加入 ${r}`),u.value.push(r);const x=await b.get(p);console.log("res3 ==>",x),r=l(x),await c.fire(`加入 ${r}`),u.value.push(r)}catch(i){console.error(i),await v.fire(`${i.message}`)}console.log("[testAsyncAwait] end."),g.close()}const Kt=()=>{G(n,n,n)},Mt=()=>{G(n,t,n)};async function U(m,d,p){console.log("[testAjaxLoading] start ..."),g.fire();try{const i=await b.get(m);console.log("res1 ==>",i);let r=l(i);await c.fire(`加入 ${r}`),g.fire(),u.value.push(r);const C=await b.get(d);console.log("res2 ==>",C),r=l(C),await c.fire(`加入 ${r}`),g.fire(),u.value.push(r);const x=await b.get(p);console.log("res3 ==>",x),r=l(x),await c.fire(`加入 ${r}`),u.value.push(r)}catch(i){console.error(i),await v.fire(`${i.message}`)}console.log("[testAjaxLoading] end."),g.close()}return{testOriginalCorrect:Ft,testOriginalWrong:St,testPromiseChainCorrect:ht,testPromiseChainWrong:$t,testAsyncPromiseChainCorrect:Pt,testAsyncPromiseChainWrong:jt,testAsyncAwaitCorrect:Kt,testAsyncAwaitWrong:Mt,testAjaxLoadingCorrect:()=>{U(n,n,n)},testAjaxLoadingWrong:()=>{U(n,t,n)}}}const{testOriginalCorrect:P,testOriginalWrong:j,testPromiseChainCorrect:K,testPromiseChainWrong:M,testAsyncPromiseChainCorrect:W,testAsyncPromiseChainWrong:R,testAsyncAwaitCorrect:H,testAsyncAwaitWrong:I,testAjaxLoadingCorrect:q,testAjaxLoadingWrong:N}=Dt();function Et(){const n=e.fire({title:"3 秒後換訊息",showConfirmButton:!1,allowEscapeKey:!1,allowOutsideClick:!1,didOpen:()=>{e.showLoading()}});console.log("[alertCustomLoadingMsg] loadingObj ==>",n),e.fire({title:"訊息馬上被換掉了",position:"top"}),e.fire({title:"訊息再次被換掉了",position:"bottom"}),setTimeout(()=>{e.fire({title:"在異步線程中，訊息換掉了"})},3e3)}return(n,t)=>(qt(),Rt(It,null,[t[43]||(t[43]=Ht('<h1 class="mb-3" data-v-faa708a6>SweetAlert2</h1><p data-v-faa708a6><a href="https://sweetalert2.github.io/" target="_blank" data-v-faa708a6> 官網 </a>｜ <a href="https://github.com/GitHubPlayerZero/hex-vue3-practise/blob/main/src/views/kit_samples/SweetAlert2.vue" target="_blank" data-v-faa708a6> code </a></p><hr class="hr" data-v-faa708a6><h2 class="h2" data-v-faa708a6>基本範例</h2>',4)),o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},[o("button",{onClick:J,class:"btn btn-primary",type:"button"},"基本訊息"),o("button",{onClick:X,class:"btn btn-primary",type:"button"}," icon、title、text "),o("button",{onClick:Q,class:"btn btn-primary",type:"button"},"footer"),o("button",{onClick:Y,class:"btn btn-primary",type:"button"},"設定 color"),o("button",{onClick:Z,class:"btn btn-primary",type:"button"},"圖片"),o("button",{onClick:_,class:"btn btn-primary",type:"button"},"自訂義 HTML"),o("button",{onClick:tt,class:"btn btn-primary",type:"button"},"只能點擊 button 關閉視窗")]),t[44]||(t[44]=o("h2",{class:"h2"},"各種 icon",-1)),o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},[o("button",{onClick:ot,class:"btn btn-success",type:"button"},"success"),o("button",{onClick:nt,class:"btn btn-danger",type:"button"},"error"),o("button",{onClick:et,class:"btn btn-warning",type:"button"},"warning"),o("button",{onClick:lt,class:"btn btn-info",type:"button"},"info"),o("button",{onClick:st,class:"btn btn-secondary",type:"button"},"question")]),t[45]||(t[45]=o("h2",{class:"h2"},"自訂義 button",-1)),o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},[o("button",{onClick:it,class:"btn btn-primary",type:"button"},"自定義 button"),o("button",{onClick:rt,class:"btn btn-primary",type:"button"},"接收 button 觸發結果"),o("button",{onClick:at,class:"btn btn-primary",type:"button"},"自定義套用的 class 樣式")]),t[46]||(t[46]=o("h2",{class:"h2"},"Timer",-1)),o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},[o("button",{onClick:ut,class:"btn btn-primary",type:"button"},"時間到自動關閉訊息"),o("button",{onClick:bt,class:"btn btn-primary",type:"button"},"有進度條的計時器"),o("button",{onClick:ft,class:"btn btn-primary",type:"button"},"可暫停的計時器"),o("button",{onClick:ct,class:"btn btn-primary",type:"button"},"倒數計時")]),t[47]||(t[47]=o("h2",{class:"h2"},"吐司訊息",-1)),t[48]||(t[48]=o("ul",null,[o("li",null,"利用 timer 的原理。"),o("li",null,"無法像 BS 那樣可以堆疊多個吐司訊息，可能是因為 SWAL2 一次只能存在一個訊息窗。")],-1)),o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},[o("button",{onClick:dt,class:"btn btn-primary",type:"button"},"吐司訊息 1"),o("button",{onClick:pt,class:"btn btn-primary",type:"button"},"吐司訊息 2")]),t[49]||(t[49]=o("h2",{class:"h2"},"dismiss",-1)),t[50]||(t[50]=o("p",null,"可以取得關閉的方式（除了 confirm 和 deny button）。",-1)),t[51]||(t[51]=o("div",null,[s(" 可搭配 DismissReason 判斷： "),o("ul",null,[o("li",null,"backdrop：點擊外部區域關閉（allowOutsideClick: true）"),o("li",null,"esc：按 ESC 關閉（allowEscapeKey: true）"),o("li",null,"timer：被計時器關閉"),o("li",null,"close：close button（showCloseButton: true）"),o("li",null,"cancel：cancel button（showCancelButton: true）")])],-1)),o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},[o("button",{onClick:mt,class:"btn btn-primary",type:"button"},"判斷各種關閉方式"),o("button",{onClick:gt,class:"btn btn-primary",type:"button"},"依據關閉方式執行不同動作")]),t[52]||(t[52]=o("h2",{class:"h2"},"輸入資料",-1)),t[53]||(t[53]=o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},null,-1)),t[54]||(t[54]=o("h2",{class:"h2"},"其它",-1)),o("div",{class:"box d-flex flex-wrap gap-3 mb-52"},[o("button",{onClick:yt,class:"btn btn-primary",type:"button"},"有背景的訊息窗")]),t[55]||(t[55]=o("hr",{class:"hr my-5"},null,-1)),t[56]||(t[56]=o("h2",{class:"h2 mb-32"},"異步的 SweetAlert2",-1)),t[57]||(t[57]=o("h3",{class:"h3"},"SweetAlert2 的生命週期",-1)),t[58]||(t[58]=o("ol",null,[o("li",null,"didRender → willOpen → 成為非同步 Promise 物件"),o("li",null,"觸發 didOpen"),o("li",null,"關閉時：willClose → didClose → didDestroy")],-1)),o("div",{class:"box mb-52"},[o("div",{class:"d-block mb-28"},[o("button",{onClick:Ct,class:"btn btn-primary",type:"button"},"顯示生命週期")]),t[13]||(t[13]=o("p",null,[s(" 使用 async / await 讓 fire 成為同步執行，這時會發現關閉訊息窗的 didClose、didDestroy 生命週期為異步。"),o("br"),s(" 這邊使用了多個 setTimeout 來約略測量生命週期何時執行，發現它們不只是異步，還而還稍有延遲，約 250 毫秒左右。 ")],-1)),o("div",{class:"d-block"},[o("button",{onClick:xt,class:"btn btn-primary",type:"button"},"willClose 之後的生命週期為異步")])]),t[59]||(t[59]=o("h2",{class:"h2"},"returnFocus",-1)),t[60]||(t[60]=o("p",null,[s(" 預設 true。"),o("br"),s(" 在訊息窗關閉後會 focus 觸發訊息窗的元素。 ")],-1)),o("div",Nt,[t[17]||(t[17]=o("p",null,[s(" 預設情況，會自動 focus。"),o("br"),s(" 註：不知為何有時會錯亂，focus 會跑到下面的 input text。 ")],-1)),o("div",Vt,[o("label",null,[t[14]||(t[14]=s(" 請按下 Enter： ")),o("input",{type:"text",onKeyup:y(wt,["enter"])},null,32)])]),t[18]||(t[18]=o("p",null,"將 returnFocus 設為 false，就不會自動 focus。",-1)),o("div",zt,[o("label",null,[t[15]||(t[15]=s(" 請按下 Enter： ")),o("input",{type:"text",onKeyup:y(kt,["enter"])},null,32)])]),t[19]||(t[19]=o("p",null,"觀察 returnFocus 發生的時機。",-1)),o("div",Gt,[o("label",null,[t[16]||(t[16]=s(" 請按下 Enter： ")),o("input",{type:"text",onKeyup:y(Tt,["enter"]),onFocus:t[0]||(t[0]=l=>console.log("focus!"))},null,32)])])]),t[61]||(t[61]=o("h2",{class:"h2"},"使用 focus 可能造成的奇怪情況",-1)),t[62]||(t[62]=o("p",null,"有時，當按下按鈕後，依據執行結果，也可能需要 focus 輸入框，此時就必須手動設定 focus 動作。",-1)),o("div",Ut,[t[28]||(t[28]=o("p",{class:"mb-28"},"先將 returnFocus 關閉，以便測試、觀察使用 focus 的時機。",-1)),t[29]||(t[29]=o("h3",{class:"h3"},"測試 1：使用 async / await 寫法，在 fire 結束後 focus 輸入框",-1)),t[30]||(t[30]=o("p",null,[s(" 會發現，如果使用 Enter 關閉訊息，訊息會一直自動被打開。"),o("br"),s(" 這是因為，輸入框觸發訊息窗，是寫在 keyup。"),o("br"),s(" 而訊息窗的 confirm button 是在按下即會觸發。 ")],-1)),t[31]||(t[31]=o("p",null," 整個流程是：按下 Enter (keydown 或 keypress) → 關閉訊息窗 → 程式往下繼續執行 → focus 輸入框 → 鬆開 Enter (keyup) → 觸發訊息窗。 ",-1)),t[32]||(t[32]=o("p",null,"由於程式跑得極快，所以很難避免。",-1)),o("div",Jt,[o("label",null,[t[20]||(t[20]=s(" 請按下 Enter： ")),o("input",{type:"text",onKeyup:y(A,["enter"]),ref_key:"refText1",ref:B},null,544)]),t[21]||(t[21]=s("   ")),o("button",{type:"button",class:"btn btn-primary",onClick:A},"點擊開啟訊息窗")]),t[33]||(t[33]=o("h3",null,"測試 2：在生命週期 didClose 或 didDestroy 做 focus 輸入框",-1)),t[34]||(t[34]=o("p",null,[s(" 由之前生命週期的測試，可以知道 didClose、didDestroy 為異步，並且有一些延遲，因此可以把 focus 寫在這邊，讓 focus 的執行稍慢一點。"),o("br"),s(" 以正常按一下 Enter 的速度來說，通常可以避免再度觸發訊息窗。"),o("br"),s(" 但如果手速稍慢的話，當然就還是會觸發訊息窗。 ")],-1)),o("div",Xt,[o("label",null,[t[22]||(t[22]=s(" 請按下 Enter： ")),o("input",{type:"text",onKeyup:y(O,["enter"]),ref_key:"refText2",ref:L},null,544)]),t[23]||(t[23]=s("   ")),o("button",{type:"button",class:"btn btn-primary",onClick:O},"點擊開啟訊息窗")]),t[35]||(t[35]=o("h3",null,"測試 3：不讓 Confirm button 被 focus。",-1)),t[36]||(t[36]=o("p",null,[s(" 訊息窗之所以可以按 Enter 關閉，是因為預設 focus Confirm button，這部份的效果似乎無法關閉..."),o("br"),s(" 因此在 didOpen 時，將 focus 設定在 popup 視窗上，這樣就不會一按 Enter 就關閉視窗了。"),o("br"),s(" 但是... 如果使用者按了 Tab，還是能將焦點移到 Confirm button，然後用 Enter 關閉視窗..."),o("br"),s(" 算是一個... 沒什麼用處的偷吃步方法... ")],-1)),o("div",Qt,[o("label",null,[t[24]||(t[24]=s(" 請按下 Enter： ")),o("input",{type:"text",onKeyup:y(E,["enter"]),ref_key:"refText3",ref:D},null,544)]),t[25]||(t[25]=s("   ")),o("button",{type:"button",class:"btn btn-primary",onClick:E},"點擊開啟訊息窗")]),t[37]||(t[37]=o("h3",null,"測試 4：改成 keyup 才觸發 button",-1)),t[38]||(t[38]=o("p",null," 取得 button 元素，並且使用 Listener 改成在 keyup 時才觸發 button 功能。 ",-1)),o("div",Yt,[o("label",null,[t[26]||(t[26]=s(" 請按下 Enter： ")),o("input",{type:"text",onKeyup:y(S,["enter"]),ref_key:"refText4",ref:F},null,544)]),t[27]||(t[27]=s("   ")),o("button",{type:"button",class:"btn btn-primary",onClick:S},"點擊開啟訊息窗")])]),t[63]||(t[63]=o("h3",{class:"h3"},"Loading",-1)),o("div",{class:"box mb-52"},[o("div",{class:"mb-24"},[t[39]||(t[39]=o("p",null,[s(" 先來看一下原始的 loading。"),o("br"),s(" 開啟 loading 後預設只有 loading 圖示。"),o("br"),s(" 這邊設定 3 秒後 hide loading，發現 loading 圖示消失，跑出了 confirm button。 ")],-1)),o("button",{onClick:vt,class:"btn btn-primary",type:"button"},"原始 loading")]),o("div",{class:"mb-24"},[t[40]||(t[40]=o("p",null,[s(" 進一步探索 loading 的原理。"),o("br"),s(" 接下來，先顯示一般的訊息窗，再開啟 loading，之後再隱藏 loading。"),o("br"),s(" 會發現，loading 其實只是替代了 confirm button 位置的動態圖示，因此可以與訊息窗合用。 ")],-1)),o("button",{onClick:Bt,class:"btn btn-primary",type:"button"},"顯示訊息 → 開啟 loading")]),o("div",{class:"mb-24"},[t[41]||(t[41]=o("p",null,[s(" 反過來，先開啟 loading 再顯示訊息，也是可以的。"),o("br"),s(" 即使顯示訊息時刻意變換了位置 (跑到上方)，但 loading 依然會跟著。"),o("br"),s(" 隱藏 loading 後依然會出現 confirm button。 ")],-1)),o("button",{onClick:At,class:"btn btn-primary",type:"button"},"開啟 loading → 顯示訊息")]),o("div",{class:"mb-24"},[t[42]||(t[42]=o("p",null,[s(" 依據上述原理，我們可以把訊息窗與 loading 結合，調整一些參數後，做出客製化的 loading。"),o("br"),s(" 做法就是不直接調用 loading，而是調用訊息窗，然後在 didOpen (或更早之前的) 生命週期開啟 loading。"),o("br"),s(" 當要關閉 loading 時，也不是使用 hide loading 的方式，而是直接將訊息窗 close。 ")],-1)),o("button",{onClick:Lt,class:"btn btn-primary",type:"button"},"客製 loading")])]),t[64]||(t[64]=o("h3",{class:"h3"},"一次只能開啟一個訊息窗",-1)),t[65]||(t[65]=o("p",null,[s(" 即使是使用 mixin 建立出多個訊息窗物件，但同時間只能有一個存在。"),o("br"),s(" 當開啟另一個訊息窗時，原先的訊息窗會被銷毀（其生命週期會直接被調用 didDestroy）。 ")],-1)),o("div",Zt,[o("button",{onClick:t[1]||(t[1]=(...l)=>a(h)&&a(h)(...l)),class:"btn btn-primary",type:"button"},"開啟兩個訊息"),o("button",{onClick:t[2]||(t[2]=(...l)=>a($)&&a($)(...l)),class:"btn btn-primary",type:"button"},"訊息 → loading → 訊息")]),t[66]||(t[66]=o("h3",{class:"h3"},"搭配 AJAX 使用",-1)),t[67]||(t[67]=o("h4",{class:"mb-3"},"原始寫法",-1)),o("div",_t,[o("button",{onClick:t[3]||(t[3]=(...l)=>a(P)&&a(P)(...l)),class:"btn btn-primary",type:"button"},"正確執行"),o("button",{onClick:t[4]||(t[4]=(...l)=>a(j)&&a(j)(...l)),class:"btn btn-primary",type:"button"},"有錯誤"),o("p",null,"結果："+k(u.value),1)]),t[68]||(t[68]=o("h4",null,"Promise Chain 寫法 (沒有 async / await)",-1)),t[69]||(t[69]=o("p",null,"由於原始的 loading 可以被 ESC 或點擊外部關閉，故並不實用，所以勢必需要使用客製化的方式製作 loading，也就是用訊息窗夾帶 loading 的方式。",-1)),t[70]||(t[70]=o("p",null,"訊息窗為 Promise 物件，因此程式不會等待使用者按確定，而是會直接繼續往下執行。",-1)),t[71]||(t[71]=o("ol",null,[o("li",null,"執行到第一個訊息窗時，loading 就被銷毀。"),o("li",null,"到第二個訊息窗時，第一個訊息窗就被銷毀。"),o("li",null,"到第三個訊息窗就會銷毀第二個。"),o("li",null,"到 finally 執行關閉訊息窗時，第三個訊息就被銷毀。")],-1)),t[72]||(t[72]=o("p",null,"因此整個過程就會看到訊息窗被打開又自動關閉的情形，第三個訊息窗甚至有可能還來不及打開就被關閉...",-1)),o("div",to,[o("button",{onClick:t[5]||(t[5]=(...l)=>a(K)&&a(K)(...l)),class:"btn btn-primary",type:"button"},"正確執行"),o("button",{onClick:t[6]||(t[6]=(...l)=>a(M)&&a(M)(...l)),class:"btn btn-primary",type:"button"},"有錯誤"),o("p",null,"結果："+k(u.value),1)]),t[73]||(t[73]=o("h4",null,"Promise Chain 寫法 (使用 async / await)",-1)),t[74]||(t[74]=o("p",null,"會等待使用者按確定。",-1)),o("div",oo,[o("button",{onClick:t[7]||(t[7]=(...l)=>a(W)&&a(W)(...l)),class:"btn btn-primary",type:"button"},"正確執行"),o("button",{onClick:t[8]||(t[8]=(...l)=>a(R)&&a(R)(...l)),class:"btn btn-primary",type:"button"},"有錯誤"),o("p",null,"結果："+k(u.value),1)]),t[75]||(t[75]=o("h4",null,"全程 async / await 寫法",-1)),t[76]||(t[76]=o("p",null,"會等待使用者按確定。",-1)),o("div",no,[o("button",{onClick:t[9]||(t[9]=(...l)=>a(H)&&a(H)(...l)),class:"btn btn-primary",type:"button"},"正確執行"),o("button",{onClick:t[10]||(t[10]=(...l)=>a(I)&&a(I)(...l)),class:"btn btn-primary",type:"button"},"有錯誤"),o("p",null,"結果："+k(u.value),1)]),t[77]||(t[77]=o("h4",null,"Loading 被關閉的問題",-1)),t[78]||(t[78]=o("p",null,[s(" 同步化解決了訊息窗異步的問題，但還有一個問題需要解決——loading 消失了。"),o("br"),s(" 這是因為同時只能存在一個訊息窗，所以 loading 在第一個訊息窗出現時就被銷毀了。"),o("br"),s(" 因此，需要在訊息窗關閉之後再開啟 loading。 ")],-1)),o("div",eo,[o("button",{onClick:t[11]||(t[11]=(...l)=>a(q)&&a(q)(...l)),class:"btn btn-primary",type:"button"},"正確執行"),o("button",{onClick:t[12]||(t[12]=(...l)=>a(N)&&a(N)(...l)),class:"btn btn-primary",type:"button"},"有錯誤"),o("p",null,"結果："+k(u.value),1)]),t[79]||(t[79]=o("h4",null,"或許... SWAL2 不適合用來做 loading...",-1)),t[80]||(t[80]=o("p",null,[s(" 從上面的各種 loading 測試，可以知道 loading 其實只是一個替代了 Confirm button 的動態圖示，且其具有依附訊息窗的特性。"),o("br"),s(" 不管是先開 loading 再開訊息窗，還是先開訊息窗再開 loading，loading 都會跟著訊息窗，僅僅替代掉了 Confirm button 的位置。"),o("br"),s(" 然而，在 AJAX 中所顯示的訊息窗，卻會是一個全新的訊息窗，它的 Confirm button 並沒有被 loading 替代掉。"),o("br"),s(" 由此可知，在異步線程中，loading 和一般訊息窗可以分開運作。"),o("br"),s(" 但在原線程中，訊息窗的 Confirm button 卻會被 loading 取代。"),o("br")],-1)),t[81]||(t[81]=o("p",null," 下面做了個測試，在開啟客製 loading 後，再直接連開兩個不同位置的訊息窗，結果第二個訊息窗仍然顯示 loading 圖示；只有使用了 setTimeout 在 3 秒後顯示的訊息窗，才能呈現自己的 Confirm button。 ",-1)),t[82]||(t[82]=o("p",null,[s(" 或許... SWAL2 本來就不適合拿來做 loading，它的本業是各種功用的訊息窗。"),o("br"),s(" 難怪... 老師還會再另推一套做 loading 的套件... ")],-1)),o("div",{class:"box d-flex flex-wrap gap-3 mb-3 mb-52"},[o("button",{onClick:Et,class:"btn btn-primary",type:"button"},"客製 loading → 顯示訊息")])],64))}},fo=Wt(lo,[["__scopeId","data-v-faa708a6"]]);export{fo as default};
